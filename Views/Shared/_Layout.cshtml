<!DOCTYPE html>
<html lang="en" data-bs-theme="light">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Mail-Archiver</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-icons/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/mobile-tables.css" asp-append-version="true" />
    <link rel="icon" type="image/svg" href="~/favicon.svg">
</head>

<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">
                    <i class="bi bi-envelope-check me-1"></i>Mail-Archiver
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse"
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Home" && ViewContext.RouteData.Values["Action"].ToString() == "Index" ? "active" : "")"
                                asp-controller="Home" asp-action="Index">
                                <i class="bi bi-speedometer2 me-1"></i>Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "MailAccounts" ? "active" : "")"
                                asp-controller="MailAccounts" asp-action="Index">
                                <i class="bi bi-person me-1"></i>Accounts
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Emails" && (ViewContext.RouteData.Values["Action"].ToString() == "Index" || ViewContext.RouteData.Values["Action"].ToString() == "Details") ? "active" : "")"
                                asp-controller="Emails" asp-action="Index">
                                <i class="bi bi-archive me-1"></i>Archive
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Emails" && ViewContext.RouteData.Values["Action"].ToString().Contains("BatchRestore") ? "active" : "")"
                                asp-controller="Emails" asp-action="Jobs">
                                <i class="bi bi-clock-history me-1"></i>
                                Jobs
                                @{
                                    try
                                    {
                                        var batchService =
                                        Context.RequestServices.GetService<MailArchiver.Services.IBatchRestoreService>();
                                        if (batchService != null)
                                        {
                                            var activeJobs = batchService.GetActiveJobs();
                                            if (activeJobs.Count > 0)
                                            {
                                                <span class="badge bg-danger rounded-pill ms-1">@activeJobs.Count</span>
                                            }
                                        }
                                    }
                                    catch
                                    {
                                        // Ignore if service not available
                                    }
                                }
                            </a>
                        </li>
                    </ul>
                    <div class="d-flex align-items-center">
                        <span class="navbar-text me-3 d-none d-lg-inline">
                            <i class="bi bi-clock-history"></i> Last update: @DateTime.Now.ToString("MM/dd HH:mm")
                        </span>
                        @await Html.PartialAsync("_UserInfo")
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div class="container-fluid body-content">
        <main role="main" class="pb-3">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["ErrorMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            @RenderBody()
        </main>
    </div>
    <footer class="footer">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <span>@DateTime.Now.Year - s1t5 | MailArchiver</span>
                </div>
                <div>
                    <a href="https://github.com/s1t5/mail-archiver" class="text-muted text-decoration-none"
                        target="_blank">GitHub</a>
                </div>
            </div>
        </div>
    </footer>
    <script src="~/lib/jquery/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // Speichere die Browser-Zeitzone im Local Storage
        localStorage.setItem('timezone', Intl.DateTimeFormat().resolvedOptions().timeZone);

        // Funktion zum Konvertieren von UTC-Zeiten zu lokaler Zeit
        function convertUTCToLocal(utcDateString) {
            if (!utcDateString) return utcDateString;

            try {
                // Versuche verschiedene Datumsformate
                let utcDate;
                if (utcDateString.includes('T')) {
                    // ISO String Format
                    utcDate = new Date(utcDateString + (utcDateString.endsWith('Z') ? '' : 'Z'));
                } else {
                    // Andere Formate
                    utcDate = new Date(utcDateString);
                }

                if (isNaN(utcDate.getTime())) {
                    return utcDateString; // Ungültiges Datum
                }

                // Format: DD.MM.YYYY HH:mm:ss oder je nach Locale
                return utcDate.toLocaleDateString() + ' ' + utcDate.toLocaleTimeString();
            } catch (e) {
                console.error('Fehler bei der Datums-Konvertierung:', e, 'Ursprünglicher Wert:', utcDateString);
                return utcDateString;
            }
        }

        // Funktion zum Aktualisieren aller Zeitstempel auf der Seite
        function updateAllTimestamps() {
            // Sucht nach allen Elementen mit data-utc-time Attribut
            const timeElements = document.querySelectorAll('[data-utc-time]');
            timeElements.forEach(element => {
                const utcTime = element.getAttribute('data-utc-time');
                if (utcTime && utcTime !== '0001-01-01T00:00:00') {
                    const localTime = convertUTCToLocal(utcTime);
                    element.textContent = localTime;
                }
            });
        }

        // Führe die Konvertierung aus, wenn das Dokument geladen ist
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', updateAllTimestamps);
        } else {
            updateAllTimestamps();
        }

        // Unterstützung für dynamisch hinzugefügte Inhalte (z.B. bei AJAX-Aufrufen)
        const observer = new MutationObserver(function (mutations) {
            let shouldUpdate = false;
            mutations.forEach(function (mutation) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach(function (node) {
                        if (node.nodeType === 1 &&
                            (node.hasAttribute('data-utc-time') ||
                                node.querySelectorAll && node.querySelectorAll('[data-utc-time]').length > 0)) {
                            shouldUpdate = true;
                        }
                    });
                }
            });
            if (shouldUpdate) {
                setTimeout(updateAllTimestamps, 100); // Kleine Verzögerung für bessere Performance
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        // Theme switching functionality
        function toggleTheme() {
            const html = document.documentElement;
            const currentTheme = html.getAttribute('data-bs-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            html.setAttribute('data-bs-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            updateThemeButton(newTheme);
        }

        function updateThemeButton(theme) {
            const themeIcon = document.getElementById('theme-icon');
            const themeText = document.getElementById('theme-text');
            
            if (themeIcon && themeText) {
                if (theme === 'dark') {
                    themeIcon.className = 'bi bi-sun-fill me-2';
                    themeText.textContent = 'Light Mode';
                } else {
                    themeIcon.className = 'bi bi-moon-fill me-2';
                    themeText.textContent = 'Dark Mode';
                }
            }
        }

        // Initialize theme on page load
        function initializeTheme() {
            const savedTheme = localStorage.getItem('theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = savedTheme || (prefersDark ? 'dark' : 'light');
            
            document.documentElement.setAttribute('data-bs-theme', theme);
            updateThemeButton(theme);
        }

        // Initialize theme when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeTheme);
        } else {
            initializeTheme();
        }

        // Listen for system theme changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
            if (!localStorage.getItem('theme')) {
                const theme = e.matches ? 'dark' : 'light';
                document.documentElement.setAttribute('data-bs-theme', theme);
                updateThemeButton(theme);
            }
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>